================================================================================
INSTRUCTIONS FOR COMPILATION IN LINUX AND MAC OS X
================================================================================

Last updated: 07 April 2016


The toolbox includes a mex file to compute efficiently the structure functions.
It  can use OpenMP to perform computations in multiple threads and increase
performance. Thus, you need an OpenMP compliant compiler.

This should pose no problem in Linux, since the gcc compiler has supported
OpenMP for a long time. However, it does pose a problem in Mac OS X, since the
clang compiler that is provided does not support it.

We provide a script that configures the compiler properly.



================================================================================
1.- Compilation without OpenMP support
================================================================================
If you don't want to include OpenMP support, the mex file will work using a
single thread only. In this case, you can compile it using matlab's default
setup.

First, open matlab and move to the root folder of the toolbox.
If you have never configured your mex system (or if you don't understand what
that means), from matlab's command line do:

>> mex -setup

Once your mex system is configured, do:

>> mex core/compute_struct_func_mex.c

================================================================================
2.- Compilation with OpenMP support
================================================================================

In this case, there are several scenarions depending on your compiler.

The provided mexopts.sh file will attempt to use the compiler called gcc. Thus,
if your gcc compiler supports OpenMP, follow the instructions in Sec. 2.1.
On the contrary, if your compiler is not named literally gcc, then follow the
instructions in Sec. 2.2.

--------------------------------------
2.1- Your gcc compiler supports OpenMP
--------------------------------------
If the gcc compiler in your path (the one you get when you type gcc in a command
line) supports OpenMP, you can compile the code straightforwardly using the
provided mexopts file. This should be the case for most Linux distributions.

Type in the command line:

>> mex -f misc/mex/mexopts.sh core/compute_struct_func_mex.c

-----------------------------------------------------------------------------
2.2- You have an OpenMP compliant which is not gcc, or gcc is not in the path
-----------------------------------------------------------------------------
In this case, you can define a symbolic link to your compiler that will be used
by the script mexopts.sh

In the following, [path_to_compiler] stands for the new compiler that you want to
use. For instance, if you want to use Homebrew's GNU gcc-5, then [path_to_compiler]
stands for /usr/local/bin/gcc-5

In matlab's command line, type.

>> !ln -s [path_to_compiler] misc/mex/comp_loc
>> mex -f misc/mex/mexopts.sh core/compute_struct_func_mex.c 

================================================================================
3.- Installation of an OpenMP-compliant gcc in Mac OS X
================================================================================
If you are using a recent version of Mac OS X, then the provided clang compiler
does not support OpenMP. In that case, you can install GNU's gcc compiler using
a package system like macports or homebrew. The rest of these instructions will
use homebrew.

In case you don't have installed homebrew already, install it following the
instructions in http://brew.sh/

Then, open a terminal and type

$ brew install gcc --without-multilib

(don't type the $, it stands for the terminal's prompt). This will likely take
quite some time to install (of the order of several minutes).

When it's done, it should have installed the new compiler
in /usr/local/bin. The compiler will be called gcc-<version>, so as not to
shadow the gcc alias to clang provided by Apple. To see which one you have, type
in a terminal:

$ ls /usr/local/bin/gcc*

